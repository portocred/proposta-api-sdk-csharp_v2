/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPropostaApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de propostas vinculadas a um CPF.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>List&lt;PropostaResponse&gt;</returns>
        List<PropostaResponse> PropostasGet (string clientId, string accessToken, byte[] xAuthorization, string cpf);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de propostas vinculadas a um CPF.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>ApiResponse of List&lt;PropostaResponse&gt;</returns>
        ApiResponse<List<PropostaResponse>> PropostasGetWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string cpf);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns></returns>
        void PropostasIdClientesDocumentosPost (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PropostasIdClientesDocumentosPostWithHttpInfo (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 PropostasIdDocUploadUrlGet (string id, string clientId, string accessToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> PropostasIdDocUploadUrlGetWithHttpInfo (string id, string clientId, string accessToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>DocumentoProposta</returns>
        DocumentoProposta PropostasIdDocumentosGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>ApiResponse of DocumentoProposta</returns>
        ApiResponse<DocumentoProposta> PropostasIdDocumentosGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Proposta</returns>
        Proposta PropostasIdGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of Proposta</returns>
        ApiResponse<Proposta> PropostasIdGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do histórico de atividades realizadas em uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>List&lt;Historico&gt;</returns>
        List<Historico> PropostasIdHistoricosGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do histórico de atividades realizadas em uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of List&lt;Historico&gt;</returns>
        ApiResponse<List<Historico>> PropostasIdHistoricosGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Envio de mensagens para a mesa sobre a proposta em análise.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns></returns>
        void PropostasIdMensagensPost (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Envio de mensagens para a mesa sobre a proposta em análise.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PropostasIdMensagensPostWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Oferta</returns>
        Oferta PropostasIdOfertasGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of Oferta</returns>
        ApiResponse<Oferta> PropostasIdOfertasGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associa uma oferta a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns></returns>
        void PropostasIdOfertasPost (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associa uma oferta a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PropostasIdOfertasPostWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de pendências de uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Pendencia</returns>
        Pendencia PropostasIdPendenciasGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de pendências de uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of Pendencia</returns>
        ApiResponse<Pendencia> PropostasIdPendenciasGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns></returns>
        void PropostasIdPut (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PropostasIdPutWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>StatusPropostaResponse</returns>
        StatusPropostaResponse PropostasIdStatusGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of StatusPropostaResponse</returns>
        ApiResponse<StatusPropostaResponse> PropostasIdStatusGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>InclusaoPropostaResponse</returns>
        InclusaoPropostaResponse PropostasPost (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>ApiResponse of InclusaoPropostaResponse</returns>
        ApiResponse<InclusaoPropostaResponse> PropostasPostWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de propostas vinculadas a um CPF.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>Task of List&lt;PropostaResponse&gt;</returns>
        System.Threading.Tasks.Task<List<PropostaResponse>> PropostasGetAsync (string clientId, string accessToken, byte[] xAuthorization, string cpf);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de propostas vinculadas a um CPF.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>Task of ApiResponse (List&lt;PropostaResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PropostaResponse>>> PropostasGetAsyncWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string cpf);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PropostasIdClientesDocumentosPostAsync (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdClientesDocumentosPostAsyncWithHttpInfo (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> PropostasIdDocUploadUrlGetAsync (string id, string clientId, string accessToken);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PropostasIdDocUploadUrlGetAsyncWithHttpInfo (string id, string clientId, string accessToken);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>Task of DocumentoProposta</returns>
        System.Threading.Tasks.Task<DocumentoProposta> PropostasIdDocumentosGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>Task of ApiResponse (DocumentoProposta)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentoProposta>> PropostasIdDocumentosGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of Proposta</returns>
        System.Threading.Tasks.Task<Proposta> PropostasIdGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (Proposta)</returns>
        System.Threading.Tasks.Task<ApiResponse<Proposta>> PropostasIdGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do histórico de atividades realizadas em uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of List&lt;Historico&gt;</returns>
        System.Threading.Tasks.Task<List<Historico>> PropostasIdHistoricosGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação do histórico de atividades realizadas em uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (List&lt;Historico&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Historico>>> PropostasIdHistoricosGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Envio de mensagens para a mesa sobre a proposta em análise.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PropostasIdMensagensPostAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Envio de mensagens para a mesa sobre a proposta em análise.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdMensagensPostAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of Oferta</returns>
        System.Threading.Tasks.Task<Oferta> PropostasIdOfertasGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (Oferta)</returns>
        System.Threading.Tasks.Task<ApiResponse<Oferta>> PropostasIdOfertasGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associa uma oferta a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PropostasIdOfertasPostAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Associa uma oferta a uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdOfertasPostAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de pendências de uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of Pendencia</returns>
        System.Threading.Tasks.Task<Pendencia> PropostasIdPendenciasGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Recuperação da lista de pendências de uma proposta.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (Pendencia)</returns>
        System.Threading.Tasks.Task<ApiResponse<Pendencia>> PropostasIdPendenciasGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PropostasIdPutAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdPutAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of StatusPropostaResponse</returns>
        System.Threading.Tasks.Task<StatusPropostaResponse> PropostasIdStatusGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (StatusPropostaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusPropostaResponse>> PropostasIdStatusGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>Task of InclusaoPropostaResponse</returns>
        System.Threading.Tasks.Task<InclusaoPropostaResponse> PropostasPostAsync (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>Task of ApiResponse (InclusaoPropostaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InclusaoPropostaResponse>> PropostasPostAsyncWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PropostaApi : IPropostaApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PropostaApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PropostaApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PropostaApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PropostaApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Recuperação da lista de propostas vinculadas a um CPF.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>List&lt;PropostaResponse&gt;</returns>
        public List<PropostaResponse> PropostasGet (string clientId, string accessToken, byte[] xAuthorization, string cpf)
        {
             ApiResponse<List<PropostaResponse>> localVarResponse = PropostasGetWithHttpInfo(clientId, accessToken, xAuthorization, cpf);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recuperação da lista de propostas vinculadas a um CPF.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>ApiResponse of List&lt;PropostaResponse&gt;</returns>
        public ApiResponse< List<PropostaResponse> > PropostasGetWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string cpf)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling PropostaApi->PropostasGet");

            var localVarPath = "/propostas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PropostaResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PropostaResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PropostaResponse>)));
        }

        /// <summary>
        ///  Recuperação da lista de propostas vinculadas a um CPF.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>Task of List&lt;PropostaResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<PropostaResponse>> PropostasGetAsync (string clientId, string accessToken, byte[] xAuthorization, string cpf)
        {
             ApiResponse<List<PropostaResponse>> localVarResponse = await PropostasGetAsyncWithHttpInfo(clientId, accessToken, xAuthorization, cpf);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recuperação da lista de propostas vinculadas a um CPF.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="cpf">Cpf utilizado na proposta.</param>
        /// <returns>Task of ApiResponse (List&lt;PropostaResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PropostaResponse>>> PropostasGetAsyncWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string cpf)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasGet");
            // verify the required parameter 'cpf' is set
            if (cpf == null)
                throw new ApiException(400, "Missing required parameter 'cpf' when calling PropostaApi->PropostasGet");

            var localVarPath = "/propostas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (cpf != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "cpf", cpf)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PropostaResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PropostaResponse>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PropostaResponse>)));
        }

        /// <summary>
        ///  Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns></returns>
        public void PropostasIdClientesDocumentosPost (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao)
        {
             PropostasIdClientesDocumentosPostWithHttpInfo(id, clientId, accessToken, documentacao);
        }

        /// <summary>
        ///  Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PropostasIdClientesDocumentosPostWithHttpInfo (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdClientesDocumentosPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdClientesDocumentosPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdClientesDocumentosPost");
            // verify the required parameter 'documentacao' is set
            if (documentacao == null)
                throw new ApiException(400, "Missing required parameter 'documentacao' when calling PropostaApi->PropostasIdClientesDocumentosPost");

            var localVarPath = "/propostas/{id}/clientes/documentos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (documentacao != null && documentacao.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(documentacao); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentacao; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdClientesDocumentosPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PropostasIdClientesDocumentosPostAsync (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao)
        {
             await PropostasIdClientesDocumentosPostAsyncWithHttpInfo(id, clientId, accessToken, documentacao);

        }

        /// <summary>
        ///  Inclusão de documentos a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="documentacao">CPF do operador, documento convertido em base64 (limitado a 2MB) e extensão do documento (EX. PDF).</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdClientesDocumentosPostAsyncWithHttpInfo (string id, string clientId, string accessToken, CpfDocumentoProposta documentacao)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdClientesDocumentosPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdClientesDocumentosPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdClientesDocumentosPost");
            // verify the required parameter 'documentacao' is set
            if (documentacao == null)
                throw new ApiException(400, "Missing required parameter 'documentacao' when calling PropostaApi->PropostasIdClientesDocumentosPost");

            var localVarPath = "/propostas/{id}/clientes/documentos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (documentacao != null && documentacao.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(documentacao); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentacao; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdClientesDocumentosPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 PropostasIdDocUploadUrlGet (string id, string clientId, string accessToken)
        {
             ApiResponse<InlineResponse200> localVarResponse = PropostasIdDocUploadUrlGetWithHttpInfo(id, clientId, accessToken);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > PropostasIdDocUploadUrlGetWithHttpInfo (string id, string clientId, string accessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdDocUploadUrlGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdDocUploadUrlGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdDocUploadUrlGet");

            var localVarPath = "/propostas/{id}/doc-upload-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdDocUploadUrlGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        ///  Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> PropostasIdDocUploadUrlGetAsync (string id, string clientId, string accessToken)
        {
             ApiResponse<InlineResponse200> localVarResponse = await PropostasIdDocUploadUrlGetAsyncWithHttpInfo(id, clientId, accessToken);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recuperação do link SAFEDOC para inclusão de documentos a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> PropostasIdDocUploadUrlGetAsyncWithHttpInfo (string id, string clientId, string accessToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdDocUploadUrlGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdDocUploadUrlGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdDocUploadUrlGet");

            var localVarPath = "/propostas/{id}/doc-upload-url";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdDocUploadUrlGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        ///  Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>DocumentoProposta</returns>
        public DocumentoProposta PropostasIdDocumentosGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento)
        {
             ApiResponse<DocumentoProposta> localVarResponse = PropostasIdDocumentosGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>ApiResponse of DocumentoProposta</returns>
        public ApiResponse< DocumentoProposta > PropostasIdDocumentosGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PropostaApi->PropostasIdDocumentosGet");

            var localVarPath = "/propostas/{id}/documentos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdDocumentosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoProposta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoProposta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoProposta)));
        }

        /// <summary>
        ///  Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>Task of DocumentoProposta</returns>
        public async System.Threading.Tasks.Task<DocumentoProposta> PropostasIdDocumentosGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento)
        {
             ApiResponse<DocumentoProposta> localVarResponse = await PropostasIdDocumentosGetAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recuperação de documentos a serem assinados e anexados a uma proposta. O tipo de documento deverá ser passado PLANILHA_CET (Pode ser gerado a partir da seleção de uma oferta). / CHECKLIST (Pode ser gerado a partir da seleção de uma oferta). / TODOS_DOCUMENTOS_PROPOSTA para todos os documentos relacionados a proposta de acordo com o produto e a opção do seguro (Podem ser gerados nos status de proposta “pré efetivada” e também “contrato efetivado”). Como retorno, serão informados os nomes dos arquivos PDF e seus conteúdos no formato byte array. Quando acionada a opção DOCUMENTOS_PDV, serão retornados os conteúdos finais dos arquivos a serem impressos em formato texto. Nessa lista de retorno, poderão ser devolvidos os arquivos ccb.txt e seguro.txt.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="tipoDocumento">Tipo do documento.</param>
        /// <returns>Task of ApiResponse (DocumentoProposta)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentoProposta>> PropostasIdDocumentosGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string tipoDocumento)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdDocumentosGet");
            // verify the required parameter 'tipoDocumento' is set
            if (tipoDocumento == null)
                throw new ApiException(400, "Missing required parameter 'tipoDocumento' when calling PropostaApi->PropostasIdDocumentosGet");

            var localVarPath = "/propostas/{id}/documentos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (tipoDocumento != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "tipoDocumento", tipoDocumento)); // query parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdDocumentosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentoProposta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentoProposta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentoProposta)));
        }

        /// <summary>
        ///  Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Proposta</returns>
        public Proposta PropostasIdGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<Proposta> localVarResponse = PropostasIdGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of Proposta</returns>
        public ApiResponse< Proposta > PropostasIdGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdGet");

            var localVarPath = "/propostas/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Proposta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Proposta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Proposta)));
        }

        /// <summary>
        ///  Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of Proposta</returns>
        public async System.Threading.Tasks.Task<Proposta> PropostasIdGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<Proposta> localVarResponse = await PropostasIdGetAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recupera os dados da proposta de acordo com o ID proposta. Esta API pode ser utilizada desde a criação até a efetivação da proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (Proposta)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Proposta>> PropostasIdGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdGet");

            var localVarPath = "/propostas/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Proposta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Proposta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Proposta)));
        }

        /// <summary>
        ///  Recuperação do histórico de atividades realizadas em uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>List&lt;Historico&gt;</returns>
        public List<Historico> PropostasIdHistoricosGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<List<Historico>> localVarResponse = PropostasIdHistoricosGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recuperação do histórico de atividades realizadas em uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of List&lt;Historico&gt;</returns>
        public ApiResponse< List<Historico> > PropostasIdHistoricosGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdHistoricosGet");

            var localVarPath = "/propostas/{id}/historicos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdHistoricosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Historico>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Historico>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Historico>)));
        }

        /// <summary>
        ///  Recuperação do histórico de atividades realizadas em uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of List&lt;Historico&gt;</returns>
        public async System.Threading.Tasks.Task<List<Historico>> PropostasIdHistoricosGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<List<Historico>> localVarResponse = await PropostasIdHistoricosGetAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recuperação do histórico de atividades realizadas em uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (List&lt;Historico&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Historico>>> PropostasIdHistoricosGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdHistoricosGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdHistoricosGet");

            var localVarPath = "/propostas/{id}/historicos";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdHistoricosGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Historico>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Historico>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Historico>)));
        }

        /// <summary>
        ///  Envio de mensagens para a mesa sobre a proposta em análise.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns></returns>
        public void PropostasIdMensagensPost (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem)
        {
             PropostasIdMensagensPostWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem);
        }

        /// <summary>
        ///  Envio de mensagens para a mesa sobre a proposta em análise.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PropostasIdMensagensPostWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'mensagem' is set
            if (mensagem == null)
                throw new ApiException(400, "Missing required parameter 'mensagem' when calling PropostaApi->PropostasIdMensagensPost");

            var localVarPath = "/propostas/{id}/mensagens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (mensagem != null && mensagem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mensagem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mensagem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdMensagensPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Envio de mensagens para a mesa sobre a proposta em análise.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PropostasIdMensagensPostAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem)
        {
             await PropostasIdMensagensPostAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem);

        }

        /// <summary>
        ///  Envio de mensagens para a mesa sobre a proposta em análise.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="mensagem">Mensagem.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdMensagensPostAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string mensagem)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdMensagensPost");
            // verify the required parameter 'mensagem' is set
            if (mensagem == null)
                throw new ApiException(400, "Missing required parameter 'mensagem' when calling PropostaApi->PropostasIdMensagensPost");

            var localVarPath = "/propostas/{id}/mensagens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (mensagem != null && mensagem.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mensagem); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mensagem; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdMensagensPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Oferta</returns>
        public Oferta PropostasIdOfertasGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<Oferta> localVarResponse = PropostasIdOfertasGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of Oferta</returns>
        public ApiResponse< Oferta > PropostasIdOfertasGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdOfertasGet");

            var localVarPath = "/propostas/{id}/ofertas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdOfertasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Oferta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Oferta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Oferta)));
        }

        /// <summary>
        ///  Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of Oferta</returns>
        public async System.Threading.Tasks.Task<Oferta> PropostasIdOfertasGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<Oferta> localVarResponse = await PropostasIdOfertasGetAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Consulta de ofertas disponíveis para associar a uma proposta. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (Oferta)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Oferta>> PropostasIdOfertasGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdOfertasGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdOfertasGet");

            var localVarPath = "/propostas/{id}/ofertas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdOfertasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Oferta>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Oferta) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Oferta)));
        }

        /// <summary>
        ///  Associa uma oferta a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns></returns>
        public void PropostasIdOfertasPost (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta)
        {
             PropostasIdOfertasPostWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta);
        }

        /// <summary>
        ///  Associa uma oferta a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PropostasIdOfertasPostWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'idOferta' is set
            if (idOferta == null)
                throw new ApiException(400, "Missing required parameter 'idOferta' when calling PropostaApi->PropostasIdOfertasPost");

            var localVarPath = "/propostas/{id}/ofertas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (idOferta != null && idOferta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(idOferta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idOferta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdOfertasPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Associa uma oferta a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PropostasIdOfertasPostAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta)
        {
             await PropostasIdOfertasPostAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta);

        }

        /// <summary>
        ///  Associa uma oferta a uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="idOferta">Identificador da oferta.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdOfertasPostAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, string idOferta)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdOfertasPost");
            // verify the required parameter 'idOferta' is set
            if (idOferta == null)
                throw new ApiException(400, "Missing required parameter 'idOferta' when calling PropostaApi->PropostasIdOfertasPost");

            var localVarPath = "/propostas/{id}/ofertas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (idOferta != null && idOferta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(idOferta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idOferta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdOfertasPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Recuperação da lista de pendências de uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Pendencia</returns>
        public Pendencia PropostasIdPendenciasGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<Pendencia> localVarResponse = PropostasIdPendenciasGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Recuperação da lista de pendências de uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of Pendencia</returns>
        public ApiResponse< Pendencia > PropostasIdPendenciasGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdPendenciasGet");

            var localVarPath = "/propostas/{id}/pendencias";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdPendenciasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pendencia>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pendencia) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pendencia)));
        }

        /// <summary>
        ///  Recuperação da lista de pendências de uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of Pendencia</returns>
        public async System.Threading.Tasks.Task<Pendencia> PropostasIdPendenciasGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<Pendencia> localVarResponse = await PropostasIdPendenciasGetAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Recuperação da lista de pendências de uma proposta.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (Pendencia)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Pendencia>> PropostasIdPendenciasGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdPendenciasGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdPendenciasGet");

            var localVarPath = "/propostas/{id}/pendencias";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdPendenciasGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Pendencia>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Pendencia) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Pendencia)));
        }

        /// <summary>
        ///  Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns></returns>
        public void PropostasIdPut (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest)
        {
             PropostasIdPutWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest);
        }

        /// <summary>
        ///  Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PropostasIdPutWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'alteracaoPropostaRequest' is set
            if (alteracaoPropostaRequest == null)
                throw new ApiException(400, "Missing required parameter 'alteracaoPropostaRequest' when calling PropostaApi->PropostasIdPut");

            var localVarPath = "/propostas/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (alteracaoPropostaRequest != null && alteracaoPropostaRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alteracaoPropostaRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alteracaoPropostaRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PropostasIdPutAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest)
        {
             await PropostasIdPutAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest);

        }

        /// <summary>
        ///  Altera uma proposta conforme alterações feitas pelo usuário. Esta API pode ser utilizada a partir da criação até a conclusão da análise de crédito. Para cancelar a proposta use a opção &#39;CANCELAMENTO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para efetivar a proposta para pagamento use a opção &#39;EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta e preencha o atributo uploadConfirmado; para pré-efetivar a proposta use a opção &#39;PRE_EFETIVACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta; para alterar a proposta use a opção &#39;ATUALIZACAO&#39; no atributo acaoAlteracao.tipoAlteracaoProposta.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="alteracaoPropostaRequest">Proposta a ser alterada.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PropostasIdPutAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, AlteracaoPropostaRequest alteracaoPropostaRequest)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdPut");
            // verify the required parameter 'alteracaoPropostaRequest' is set
            if (alteracaoPropostaRequest == null)
                throw new ApiException(400, "Missing required parameter 'alteracaoPropostaRequest' when calling PropostaApi->PropostasIdPut");

            var localVarPath = "/propostas/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (alteracaoPropostaRequest != null && alteracaoPropostaRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(alteracaoPropostaRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = alteracaoPropostaRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>StatusPropostaResponse</returns>
        public StatusPropostaResponse PropostasIdStatusGet (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<StatusPropostaResponse> localVarResponse = PropostasIdStatusGetWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>ApiResponse of StatusPropostaResponse</returns>
        public ApiResponse< StatusPropostaResponse > PropostasIdStatusGetWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdStatusGet");

            var localVarPath = "/propostas/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusPropostaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusPropostaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusPropostaResponse)));
        }

        /// <summary>
        ///  Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of StatusPropostaResponse</returns>
        public async System.Threading.Tasks.Task<StatusPropostaResponse> PropostasIdStatusGetAsync (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
             ApiResponse<StatusPropostaResponse> localVarResponse = await PropostasIdStatusGetAsyncWithHttpInfo(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Consulta status da proposta. A partir da criação da proposta, a qualquer momento pode ser utilizada a API para consulta de status. Essa API possui um cache de 5 segundos. Obs. A obrigatoriedade dos campos não está definida na interface da API. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Identificador da proposta.</param>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <returns>Task of ApiResponse (StatusPropostaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusPropostaResponse>> PropostasIdStatusGetAsyncWithHttpInfo (string id, string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasIdStatusGet");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasIdStatusGet");

            var localVarPath = "/propostas/{id}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasIdStatusGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusPropostaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StatusPropostaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusPropostaResponse)));
        }

        /// <summary>
        ///  Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>InclusaoPropostaResponse</returns>
        public InclusaoPropostaResponse PropostasPost (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta)
        {
             ApiResponse<InclusaoPropostaResponse> localVarResponse = PropostasPostWithHttpInfo(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>ApiResponse of InclusaoPropostaResponse</returns>
        public ApiResponse< InclusaoPropostaResponse > PropostasPostWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'proposta' is set
            if (proposta == null)
                throw new ApiException(400, "Missing required parameter 'proposta' when calling PropostaApi->PropostasPost");

            var localVarPath = "/propostas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (proposta != null && proposta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(proposta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = proposta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InclusaoPropostaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InclusaoPropostaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InclusaoPropostaResponse)));
        }

        /// <summary>
        ///  Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>Task of InclusaoPropostaResponse</returns>
        public async System.Threading.Tasks.Task<InclusaoPropostaResponse> PropostasPostAsync (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta)
        {
             ApiResponse<InclusaoPropostaResponse> localVarResponse = await PropostasPostAsyncWithHttpInfo(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Esta API tem o objetivo de incluir uma proposta de crédito. Caso o cliente já possua uma proposta em andamento, ou qualquer outra inconsistência na inclusão, o sistema irá retornar um código de erro informando o motivo.  Obs. A obrigatoriedade dos campos e a relação de domínios a serem respeitadas pelos parceiros não estão definidas na interfaces das APIs. Consulte a documentação técnica para conhecer a cardinalidade real do conjunto de campos e domínios.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client ID disponibilizado na criação da App.</param>
        /// <param name="accessToken">Access Token com permissões de acesso.</param>
        /// <param name="xAuthorization">base64 do codigoParceiro:codigoUsuario:senha.</param>
        /// <param name="codigoLoja">Código da loja (Filial). (fixo informada pela financeira).</param>
        /// <param name="codigoLojista">Código do lojista (Rede de loja). (fixo informada pela financeira).</param>
        /// <param name="proposta">Proposta a ser criada.</param>
        /// <returns>Task of ApiResponse (InclusaoPropostaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InclusaoPropostaResponse>> PropostasPostAsyncWithHttpInfo (string clientId, string accessToken, byte[] xAuthorization, string codigoLoja, string codigoLojista, Proposta proposta)
        {
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'accessToken' is set
            if (accessToken == null)
                throw new ApiException(400, "Missing required parameter 'accessToken' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'xAuthorization' is set
            if (xAuthorization == null)
                throw new ApiException(400, "Missing required parameter 'xAuthorization' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'codigoLoja' is set
            if (codigoLoja == null)
                throw new ApiException(400, "Missing required parameter 'codigoLoja' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'codigoLojista' is set
            if (codigoLojista == null)
                throw new ApiException(400, "Missing required parameter 'codigoLojista' when calling PropostaApi->PropostasPost");
            // verify the required parameter 'proposta' is set
            if (proposta == null)
                throw new ApiException(400, "Missing required parameter 'proposta' when calling PropostaApi->PropostasPost");

            var localVarPath = "/propostas";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (clientId != null) localVarHeaderParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // header parameter
            if (accessToken != null) localVarHeaderParams.Add("access_token", Configuration.ApiClient.ParameterToString(accessToken)); // header parameter
            if (xAuthorization != null) localVarHeaderParams.Add("x-authorization", Configuration.ApiClient.ParameterToString(xAuthorization)); // header parameter
            if (codigoLoja != null) localVarHeaderParams.Add("codigoLoja", Configuration.ApiClient.ParameterToString(codigoLoja)); // header parameter
            if (codigoLojista != null) localVarHeaderParams.Add("codigoLojista", Configuration.ApiClient.ParameterToString(codigoLojista)); // header parameter
            if (proposta != null && proposta.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(proposta); // http body (model) parameter
            }
            else
            {
                localVarPostBody = proposta; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PropostasPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InclusaoPropostaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InclusaoPropostaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(InclusaoPropostaResponse)));
        }

    }
}

/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando a forma de envio da proposta.
    /// </summary>
    [DataContract]
    public partial class FormaEnvio :  IEquatable<FormaEnvio>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets PorCorreio
        /// </summary>
        [DataMember(Name="porCorreio", EmitDefaultValue=false)]
        public IndicativoSimNao? PorCorreio { get; set; }
        /// <summary>
        /// Gets or Sets PorEmail
        /// </summary>
        [DataMember(Name="porEmail", EmitDefaultValue=false)]
        public IndicativoSimNao? PorEmail { get; set; }
        /// <summary>
        /// Gets or Sets PorLoja
        /// </summary>
        [DataMember(Name="porLoja", EmitDefaultValue=false)]
        public IndicativoSimNao? PorLoja { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FormaEnvio" /> class.
        /// </summary>
        /// <param name="PorCorreio">PorCorreio.</param>
        /// <param name="PorEmail">PorEmail.</param>
        /// <param name="EnderecoEmail">Endereço do E-mail..</param>
        /// <param name="PorLoja">PorLoja.</param>
        public FormaEnvio(IndicativoSimNao? PorCorreio = default(IndicativoSimNao?), IndicativoSimNao? PorEmail = default(IndicativoSimNao?), string EnderecoEmail = default(string), IndicativoSimNao? PorLoja = default(IndicativoSimNao?))
        {
            this.PorCorreio = PorCorreio;
            this.PorEmail = PorEmail;
            this.EnderecoEmail = EnderecoEmail;
            this.PorLoja = PorLoja;
        }
        


        /// <summary>
        /// Endereço do E-mail.
        /// </summary>
        /// <value>Endereço do E-mail.</value>
        [DataMember(Name="enderecoEmail", EmitDefaultValue=false)]
        public string EnderecoEmail { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FormaEnvio {\n");
            sb.Append("  PorCorreio: ").Append(PorCorreio).Append("\n");
            sb.Append("  PorEmail: ").Append(PorEmail).Append("\n");
            sb.Append("  EnderecoEmail: ").Append(EnderecoEmail).Append("\n");
            sb.Append("  PorLoja: ").Append(PorLoja).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FormaEnvio);
        }

        /// <summary>
        /// Returns true if FormaEnvio instances are equal
        /// </summary>
        /// <param name="input">Instance of FormaEnvio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FormaEnvio input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PorCorreio == input.PorCorreio ||
                    (this.PorCorreio != null &&
                    this.PorCorreio.Equals(input.PorCorreio))
                ) && 
                (
                    this.PorEmail == input.PorEmail ||
                    (this.PorEmail != null &&
                    this.PorEmail.Equals(input.PorEmail))
                ) && 
                (
                    this.EnderecoEmail == input.EnderecoEmail ||
                    (this.EnderecoEmail != null &&
                    this.EnderecoEmail.Equals(input.EnderecoEmail))
                ) && 
                (
                    this.PorLoja == input.PorLoja ||
                    (this.PorLoja != null &&
                    this.PorLoja.Equals(input.PorLoja))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PorCorreio != null)
                    hashCode = hashCode * 59 + this.PorCorreio.GetHashCode();
                if (this.PorEmail != null)
                    hashCode = hashCode * 59 + this.PorEmail.GetHashCode();
                if (this.EnderecoEmail != null)
                    hashCode = hashCode * 59 + this.EnderecoEmail.GetHashCode();
                if (this.PorLoja != null)
                    hashCode = hashCode * 59 + this.PorLoja.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

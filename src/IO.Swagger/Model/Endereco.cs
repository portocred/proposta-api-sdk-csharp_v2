/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando um endereco.
    /// </summary>
    [DataContract]
    public partial class Endereco :  IEquatable<Endereco>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TipoResidencia
        /// </summary>
        [DataMember(Name="tipoResidencia", EmitDefaultValue=false)]
        public TipoResidencia? TipoResidencia { get; set; }
        /// <summary>
        /// Gets or Sets TipoCorrespondencia
        /// </summary>
        [DataMember(Name="tipoCorrespondencia", EmitDefaultValue=false)]
        public TipoCorrespondencia? TipoCorrespondencia { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Endereco" /> class.
        /// </summary>
        /// <param name="Logradouro">Logradouro..</param>
        /// <param name="Numero">Número..</param>
        /// <param name="Complemento">Complemento..</param>
        /// <param name="Bairro">Bairro..</param>
        /// <param name="Cidade">Cidade..</param>
        /// <param name="Uf">Unidade federativa do endereço..</param>
        /// <param name="Cep">Cep do endereço..</param>
        /// <param name="TempoMes">Desde que mês o cliente tem essa conta..</param>
        /// <param name="TempoAno">Desde que ano o cliente tem essa conta..</param>
        /// <param name="TipoResidencia">TipoResidencia.</param>
        /// <param name="TipoCorrespondencia">TipoCorrespondencia.</param>
        public Endereco(string Logradouro = default(string), string Numero = default(string), string Complemento = default(string), string Bairro = default(string), string Cidade = default(string), string Uf = default(string), long? Cep = default(long?), int? TempoMes = default(int?), int? TempoAno = default(int?), TipoResidencia? TipoResidencia = default(TipoResidencia?), TipoCorrespondencia? TipoCorrespondencia = default(TipoCorrespondencia?))
        {
            this.Logradouro = Logradouro;
            this.Numero = Numero;
            this.Complemento = Complemento;
            this.Bairro = Bairro;
            this.Cidade = Cidade;
            this.Uf = Uf;
            this.Cep = Cep;
            this.TempoMes = TempoMes;
            this.TempoAno = TempoAno;
            this.TipoResidencia = TipoResidencia;
            this.TipoCorrespondencia = TipoCorrespondencia;
        }
        
        /// <summary>
        /// Logradouro.
        /// </summary>
        /// <value>Logradouro.</value>
        [DataMember(Name="logradouro", EmitDefaultValue=false)]
        public string Logradouro { get; set; }

        /// <summary>
        /// Número.
        /// </summary>
        /// <value>Número.</value>
        [DataMember(Name="numero", EmitDefaultValue=false)]
        public string Numero { get; set; }

        /// <summary>
        /// Complemento.
        /// </summary>
        /// <value>Complemento.</value>
        [DataMember(Name="complemento", EmitDefaultValue=false)]
        public string Complemento { get; set; }

        /// <summary>
        /// Bairro.
        /// </summary>
        /// <value>Bairro.</value>
        [DataMember(Name="bairro", EmitDefaultValue=false)]
        public string Bairro { get; set; }

        /// <summary>
        /// Cidade.
        /// </summary>
        /// <value>Cidade.</value>
        [DataMember(Name="cidade", EmitDefaultValue=false)]
        public string Cidade { get; set; }

        /// <summary>
        /// Unidade federativa do endereço.
        /// </summary>
        /// <value>Unidade federativa do endereço.</value>
        [DataMember(Name="uf", EmitDefaultValue=false)]
        public string Uf { get; set; }

        /// <summary>
        /// Cep do endereço.
        /// </summary>
        /// <value>Cep do endereço.</value>
        [DataMember(Name="cep", EmitDefaultValue=false)]
        public long? Cep { get; set; }

        /// <summary>
        /// Desde que mês o cliente tem essa conta.
        /// </summary>
        /// <value>Desde que mês o cliente tem essa conta.</value>
        [DataMember(Name="tempoMes", EmitDefaultValue=false)]
        public int? TempoMes { get; set; }

        /// <summary>
        /// Desde que ano o cliente tem essa conta.
        /// </summary>
        /// <value>Desde que ano o cliente tem essa conta.</value>
        [DataMember(Name="tempoAno", EmitDefaultValue=false)]
        public int? TempoAno { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Endereco {\n");
            sb.Append("  Logradouro: ").Append(Logradouro).Append("\n");
            sb.Append("  Numero: ").Append(Numero).Append("\n");
            sb.Append("  Complemento: ").Append(Complemento).Append("\n");
            sb.Append("  Bairro: ").Append(Bairro).Append("\n");
            sb.Append("  Cidade: ").Append(Cidade).Append("\n");
            sb.Append("  Uf: ").Append(Uf).Append("\n");
            sb.Append("  Cep: ").Append(Cep).Append("\n");
            sb.Append("  TempoMes: ").Append(TempoMes).Append("\n");
            sb.Append("  TempoAno: ").Append(TempoAno).Append("\n");
            sb.Append("  TipoResidencia: ").Append(TipoResidencia).Append("\n");
            sb.Append("  TipoCorrespondencia: ").Append(TipoCorrespondencia).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Endereco);
        }

        /// <summary>
        /// Returns true if Endereco instances are equal
        /// </summary>
        /// <param name="input">Instance of Endereco to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Endereco input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Logradouro == input.Logradouro ||
                    (this.Logradouro != null &&
                    this.Logradouro.Equals(input.Logradouro))
                ) && 
                (
                    this.Numero == input.Numero ||
                    (this.Numero != null &&
                    this.Numero.Equals(input.Numero))
                ) && 
                (
                    this.Complemento == input.Complemento ||
                    (this.Complemento != null &&
                    this.Complemento.Equals(input.Complemento))
                ) && 
                (
                    this.Bairro == input.Bairro ||
                    (this.Bairro != null &&
                    this.Bairro.Equals(input.Bairro))
                ) && 
                (
                    this.Cidade == input.Cidade ||
                    (this.Cidade != null &&
                    this.Cidade.Equals(input.Cidade))
                ) && 
                (
                    this.Uf == input.Uf ||
                    (this.Uf != null &&
                    this.Uf.Equals(input.Uf))
                ) && 
                (
                    this.Cep == input.Cep ||
                    (this.Cep != null &&
                    this.Cep.Equals(input.Cep))
                ) && 
                (
                    this.TempoMes == input.TempoMes ||
                    (this.TempoMes != null &&
                    this.TempoMes.Equals(input.TempoMes))
                ) && 
                (
                    this.TempoAno == input.TempoAno ||
                    (this.TempoAno != null &&
                    this.TempoAno.Equals(input.TempoAno))
                ) && 
                (
                    this.TipoResidencia == input.TipoResidencia ||
                    (this.TipoResidencia != null &&
                    this.TipoResidencia.Equals(input.TipoResidencia))
                ) && 
                (
                    this.TipoCorrespondencia == input.TipoCorrespondencia ||
                    (this.TipoCorrespondencia != null &&
                    this.TipoCorrespondencia.Equals(input.TipoCorrespondencia))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Logradouro != null)
                    hashCode = hashCode * 59 + this.Logradouro.GetHashCode();
                if (this.Numero != null)
                    hashCode = hashCode * 59 + this.Numero.GetHashCode();
                if (this.Complemento != null)
                    hashCode = hashCode * 59 + this.Complemento.GetHashCode();
                if (this.Bairro != null)
                    hashCode = hashCode * 59 + this.Bairro.GetHashCode();
                if (this.Cidade != null)
                    hashCode = hashCode * 59 + this.Cidade.GetHashCode();
                if (this.Uf != null)
                    hashCode = hashCode * 59 + this.Uf.GetHashCode();
                if (this.Cep != null)
                    hashCode = hashCode * 59 + this.Cep.GetHashCode();
                if (this.TempoMes != null)
                    hashCode = hashCode * 59 + this.TempoMes.GetHashCode();
                if (this.TempoAno != null)
                    hashCode = hashCode * 59 + this.TempoAno.GetHashCode();
                if (this.TipoResidencia != null)
                    hashCode = hashCode * 59 + this.TipoResidencia.GetHashCode();
                if (this.TipoCorrespondencia != null)
                    hashCode = hashCode * 59 + this.TipoCorrespondencia.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

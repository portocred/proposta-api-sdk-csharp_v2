/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Objeto de entrada com os dados para pré-efetivar a proposta.
    /// </summary>
    [DataContract]
    public partial class PreEfetivacaoPropostaRequest :  IEquatable<PreEfetivacaoPropostaRequest>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TipoEfetivacao
        /// </summary>
        [DataMember(Name="tipoEfetivacao", EmitDefaultValue=false)]
        public TipoEfetivacao? TipoEfetivacao { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreEfetivacaoPropostaRequest" /> class.
        /// </summary>
        /// <param name="Cheques">Cheques.</param>
        /// <param name="DadosLiberacao">DadosLiberacao.</param>
        /// <param name="FormaEnvio">FormaEnvio.</param>
        /// <param name="TipoEfetivacao">TipoEfetivacao.</param>
        public PreEfetivacaoPropostaRequest(List<Cheque> Cheques = default(List<Cheque>), DadosLiberacao DadosLiberacao = default(DadosLiberacao), FormaEnvio FormaEnvio = default(FormaEnvio), TipoEfetivacao? TipoEfetivacao = default(TipoEfetivacao?))
        {
            this.Cheques = Cheques;
            this.DadosLiberacao = DadosLiberacao;
            this.FormaEnvio = FormaEnvio;
            this.TipoEfetivacao = TipoEfetivacao;
        }
        
        /// <summary>
        /// Gets or Sets Cheques
        /// </summary>
        [DataMember(Name="cheques", EmitDefaultValue=false)]
        public List<Cheque> Cheques { get; set; }

        /// <summary>
        /// Gets or Sets DadosLiberacao
        /// </summary>
        [DataMember(Name="dadosLiberacao", EmitDefaultValue=false)]
        public DadosLiberacao DadosLiberacao { get; set; }

        /// <summary>
        /// Gets or Sets FormaEnvio
        /// </summary>
        [DataMember(Name="formaEnvio", EmitDefaultValue=false)]
        public FormaEnvio FormaEnvio { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreEfetivacaoPropostaRequest {\n");
            sb.Append("  Cheques: ").Append(Cheques).Append("\n");
            sb.Append("  DadosLiberacao: ").Append(DadosLiberacao).Append("\n");
            sb.Append("  FormaEnvio: ").Append(FormaEnvio).Append("\n");
            sb.Append("  TipoEfetivacao: ").Append(TipoEfetivacao).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreEfetivacaoPropostaRequest);
        }

        /// <summary>
        /// Returns true if PreEfetivacaoPropostaRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PreEfetivacaoPropostaRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreEfetivacaoPropostaRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cheques == input.Cheques ||
                    this.Cheques != null &&
                    this.Cheques.SequenceEqual(input.Cheques)
                ) && 
                (
                    this.DadosLiberacao == input.DadosLiberacao ||
                    (this.DadosLiberacao != null &&
                    this.DadosLiberacao.Equals(input.DadosLiberacao))
                ) && 
                (
                    this.FormaEnvio == input.FormaEnvio ||
                    (this.FormaEnvio != null &&
                    this.FormaEnvio.Equals(input.FormaEnvio))
                ) && 
                (
                    this.TipoEfetivacao == input.TipoEfetivacao ||
                    (this.TipoEfetivacao != null &&
                    this.TipoEfetivacao.Equals(input.TipoEfetivacao))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cheques != null)
                    hashCode = hashCode * 59 + this.Cheques.GetHashCode();
                if (this.DadosLiberacao != null)
                    hashCode = hashCode * 59 + this.DadosLiberacao.GetHashCode();
                if (this.FormaEnvio != null)
                    hashCode = hashCode * 59 + this.FormaEnvio.GetHashCode();
                if (this.TipoEfetivacao != null)
                    hashCode = hashCode * 59 + this.TipoEfetivacao.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando um documento da proposta.
    /// </summary>
    [DataContract]
    public partial class DocumentoProposta :  IEquatable<DocumentoProposta>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentoProposta" /> class.
        /// </summary>
        /// <param name="FileContent">Conteúdo do aruqivo em binário..</param>
        /// <param name="NomeArquivo">Nome do arquivo..</param>
        public DocumentoProposta(byte[] FileContent = default(byte[]), string NomeArquivo = default(string))
        {
            this.FileContent = FileContent;
            this.NomeArquivo = NomeArquivo;
        }
        
        /// <summary>
        /// Conteúdo do aruqivo em binário.
        /// </summary>
        /// <value>Conteúdo do aruqivo em binário.</value>
        [DataMember(Name="fileContent", EmitDefaultValue=false)]
        public byte[] FileContent { get; set; }

        /// <summary>
        /// Nome do arquivo.
        /// </summary>
        /// <value>Nome do arquivo.</value>
        [DataMember(Name="nomeArquivo", EmitDefaultValue=false)]
        public string NomeArquivo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentoProposta {\n");
            sb.Append("  FileContent: ").Append(FileContent).Append("\n");
            sb.Append("  NomeArquivo: ").Append(NomeArquivo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentoProposta);
        }

        /// <summary>
        /// Returns true if DocumentoProposta instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentoProposta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentoProposta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FileContent == input.FileContent ||
                    (this.FileContent != null &&
                    this.FileContent.Equals(input.FileContent))
                ) && 
                (
                    this.NomeArquivo == input.NomeArquivo ||
                    (this.NomeArquivo != null &&
                    this.NomeArquivo.Equals(input.NomeArquivo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FileContent != null)
                    hashCode = hashCode * 59 + this.FileContent.GetHashCode();
                if (this.NomeArquivo != null)
                    hashCode = hashCode * 59 + this.NomeArquivo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

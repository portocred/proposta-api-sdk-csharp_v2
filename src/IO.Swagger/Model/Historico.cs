/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando um histórico da proposta.
    /// </summary>
    [DataContract]
    public partial class Historico :  IEquatable<Historico>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Historico" /> class.
        /// </summary>
        /// <param name="DataObservacao">Data de observação do histórico..</param>
        /// <param name="HoraObservacao">Hora de observação do histórico..</param>
        /// <param name="Observacao">Observação do histórico..</param>
        public Historico(DateTime? DataObservacao = default(DateTime?), string HoraObservacao = default(string), string Observacao = default(string))
        {
            this.DataObservacao = DataObservacao;
            this.HoraObservacao = HoraObservacao;
            this.Observacao = Observacao;
        }
        
        /// <summary>
        /// Data de observação do histórico.
        /// </summary>
        /// <value>Data de observação do histórico.</value>
        [DataMember(Name="dataObservacao", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DataObservacao { get; set; }

        /// <summary>
        /// Hora de observação do histórico.
        /// </summary>
        /// <value>Hora de observação do histórico.</value>
        [DataMember(Name="horaObservacao", EmitDefaultValue=false)]
        public string HoraObservacao { get; set; }

        /// <summary>
        /// Observação do histórico.
        /// </summary>
        /// <value>Observação do histórico.</value>
        [DataMember(Name="observacao", EmitDefaultValue=false)]
        public string Observacao { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Historico {\n");
            sb.Append("  DataObservacao: ").Append(DataObservacao).Append("\n");
            sb.Append("  HoraObservacao: ").Append(HoraObservacao).Append("\n");
            sb.Append("  Observacao: ").Append(Observacao).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Historico);
        }

        /// <summary>
        /// Returns true if Historico instances are equal
        /// </summary>
        /// <param name="input">Instance of Historico to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Historico input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DataObservacao == input.DataObservacao ||
                    (this.DataObservacao != null &&
                    this.DataObservacao.Equals(input.DataObservacao))
                ) && 
                (
                    this.HoraObservacao == input.HoraObservacao ||
                    (this.HoraObservacao != null &&
                    this.HoraObservacao.Equals(input.HoraObservacao))
                ) && 
                (
                    this.Observacao == input.Observacao ||
                    (this.Observacao != null &&
                    this.Observacao.Equals(input.Observacao))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataObservacao != null)
                    hashCode = hashCode * 59 + this.DataObservacao.GetHashCode();
                if (this.HoraObservacao != null)
                    hashCode = hashCode * 59 + this.HoraObservacao.GetHashCode();
                if (this.Observacao != null)
                    hashCode = hashCode * 59 + this.Observacao.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

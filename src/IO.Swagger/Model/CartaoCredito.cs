/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando um cartão de crédito.
    /// </summary>
    [DataContract]
    public partial class CartaoCredito :  IEquatable<CartaoCredito>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CartaoCredito" /> class.
        /// </summary>
        /// <param name="Emissor">Código do emissor do cartão de crédito..</param>
        /// <param name="LimiteCredito">Limite de crédito do cartão..</param>
        public CartaoCredito(string Emissor = default(string), double? LimiteCredito = default(double?))
        {
            this.Emissor = Emissor;
            this.LimiteCredito = LimiteCredito;
        }
        
        /// <summary>
        /// Código do emissor do cartão de crédito.
        /// </summary>
        /// <value>Código do emissor do cartão de crédito.</value>
        [DataMember(Name="emissor", EmitDefaultValue=false)]
        public string Emissor { get; set; }

        /// <summary>
        /// Limite de crédito do cartão.
        /// </summary>
        /// <value>Limite de crédito do cartão.</value>
        [DataMember(Name="limiteCredito", EmitDefaultValue=false)]
        public double? LimiteCredito { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CartaoCredito {\n");
            sb.Append("  Emissor: ").Append(Emissor).Append("\n");
            sb.Append("  LimiteCredito: ").Append(LimiteCredito).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CartaoCredito);
        }

        /// <summary>
        /// Returns true if CartaoCredito instances are equal
        /// </summary>
        /// <param name="input">Instance of CartaoCredito to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CartaoCredito input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Emissor == input.Emissor ||
                    (this.Emissor != null &&
                    this.Emissor.Equals(input.Emissor))
                ) && 
                (
                    this.LimiteCredito == input.LimiteCredito ||
                    (this.LimiteCredito != null &&
                    this.LimiteCredito.Equals(input.LimiteCredito))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Emissor != null)
                    hashCode = hashCode * 59 + this.Emissor.GetHashCode();
                if (this.LimiteCredito != null)
                    hashCode = hashCode * 59 + this.LimiteCredito.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

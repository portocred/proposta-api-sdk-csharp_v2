/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando uma conta bancária.
    /// </summary>
    [DataContract]
    public partial class ContaBancaria :  IEquatable<ContaBancaria>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TipoContaBancaria
        /// </summary>
        [DataMember(Name="tipoContaBancaria", EmitDefaultValue=false)]
        public TipoContaBancaria? TipoContaBancaria { get; set; }
        /// <summary>
        /// Gets or Sets TipoConta
        /// </summary>
        [DataMember(Name="tipoConta", EmitDefaultValue=false)]
        public TipoConta? TipoConta { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContaBancaria" /> class.
        /// </summary>
        /// <param name="CodigoBanco">Código do banco..</param>
        /// <param name="TipoContaBancaria">TipoContaBancaria.</param>
        /// <param name="CodigoAgencia">Código da agência..</param>
        /// <param name="Conta">Número da conta..</param>
        /// <param name="Cidade">Cidade do banco da abertura da conta..</param>
        /// <param name="Uf">Unidade federativa do banco da abertura da conta..</param>
        /// <param name="TempoMes">Desde que mês o cliente tem essa conta..</param>
        /// <param name="TempoAno">Desde que ano o cliente tem essa conta..</param>
        /// <param name="LimiteChequeEspecial">Valor do limite do cheque especial..</param>
        /// <param name="TipoConta">TipoConta.</param>
        public ContaBancaria(string CodigoBanco = default(string), TipoContaBancaria? TipoContaBancaria = default(TipoContaBancaria?), string CodigoAgencia = default(string), string Conta = default(string), string Cidade = default(string), string Uf = default(string), int? TempoMes = default(int?), int? TempoAno = default(int?), double? LimiteChequeEspecial = default(double?), TipoConta? TipoConta = default(TipoConta?))
        {
            this.CodigoBanco = CodigoBanco;
            this.TipoContaBancaria = TipoContaBancaria;
            this.CodigoAgencia = CodigoAgencia;
            this.Conta = Conta;
            this.Cidade = Cidade;
            this.Uf = Uf;
            this.TempoMes = TempoMes;
            this.TempoAno = TempoAno;
            this.LimiteChequeEspecial = LimiteChequeEspecial;
            this.TipoConta = TipoConta;
        }
        
        /// <summary>
        /// Código do banco.
        /// </summary>
        /// <value>Código do banco.</value>
        [DataMember(Name="codigoBanco", EmitDefaultValue=false)]
        public string CodigoBanco { get; set; }


        /// <summary>
        /// Código da agência.
        /// </summary>
        /// <value>Código da agência.</value>
        [DataMember(Name="codigoAgencia", EmitDefaultValue=false)]
        public string CodigoAgencia { get; set; }

        /// <summary>
        /// Número da conta.
        /// </summary>
        /// <value>Número da conta.</value>
        [DataMember(Name="conta", EmitDefaultValue=false)]
        public string Conta { get; set; }

        /// <summary>
        /// Cidade do banco da abertura da conta.
        /// </summary>
        /// <value>Cidade do banco da abertura da conta.</value>
        [DataMember(Name="cidade", EmitDefaultValue=false)]
        public string Cidade { get; set; }

        /// <summary>
        /// Unidade federativa do banco da abertura da conta.
        /// </summary>
        /// <value>Unidade federativa do banco da abertura da conta.</value>
        [DataMember(Name="uf", EmitDefaultValue=false)]
        public string Uf { get; set; }

        /// <summary>
        /// Desde que mês o cliente tem essa conta.
        /// </summary>
        /// <value>Desde que mês o cliente tem essa conta.</value>
        [DataMember(Name="tempoMes", EmitDefaultValue=false)]
        public int? TempoMes { get; set; }

        /// <summary>
        /// Desde que ano o cliente tem essa conta.
        /// </summary>
        /// <value>Desde que ano o cliente tem essa conta.</value>
        [DataMember(Name="tempoAno", EmitDefaultValue=false)]
        public int? TempoAno { get; set; }

        /// <summary>
        /// Valor do limite do cheque especial.
        /// </summary>
        /// <value>Valor do limite do cheque especial.</value>
        [DataMember(Name="limiteChequeEspecial", EmitDefaultValue=false)]
        public double? LimiteChequeEspecial { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContaBancaria {\n");
            sb.Append("  CodigoBanco: ").Append(CodigoBanco).Append("\n");
            sb.Append("  TipoContaBancaria: ").Append(TipoContaBancaria).Append("\n");
            sb.Append("  CodigoAgencia: ").Append(CodigoAgencia).Append("\n");
            sb.Append("  Conta: ").Append(Conta).Append("\n");
            sb.Append("  Cidade: ").Append(Cidade).Append("\n");
            sb.Append("  Uf: ").Append(Uf).Append("\n");
            sb.Append("  TempoMes: ").Append(TempoMes).Append("\n");
            sb.Append("  TempoAno: ").Append(TempoAno).Append("\n");
            sb.Append("  LimiteChequeEspecial: ").Append(LimiteChequeEspecial).Append("\n");
            sb.Append("  TipoConta: ").Append(TipoConta).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContaBancaria);
        }

        /// <summary>
        /// Returns true if ContaBancaria instances are equal
        /// </summary>
        /// <param name="input">Instance of ContaBancaria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContaBancaria input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CodigoBanco == input.CodigoBanco ||
                    (this.CodigoBanco != null &&
                    this.CodigoBanco.Equals(input.CodigoBanco))
                ) && 
                (
                    this.TipoContaBancaria == input.TipoContaBancaria ||
                    (this.TipoContaBancaria != null &&
                    this.TipoContaBancaria.Equals(input.TipoContaBancaria))
                ) && 
                (
                    this.CodigoAgencia == input.CodigoAgencia ||
                    (this.CodigoAgencia != null &&
                    this.CodigoAgencia.Equals(input.CodigoAgencia))
                ) && 
                (
                    this.Conta == input.Conta ||
                    (this.Conta != null &&
                    this.Conta.Equals(input.Conta))
                ) && 
                (
                    this.Cidade == input.Cidade ||
                    (this.Cidade != null &&
                    this.Cidade.Equals(input.Cidade))
                ) && 
                (
                    this.Uf == input.Uf ||
                    (this.Uf != null &&
                    this.Uf.Equals(input.Uf))
                ) && 
                (
                    this.TempoMes == input.TempoMes ||
                    (this.TempoMes != null &&
                    this.TempoMes.Equals(input.TempoMes))
                ) && 
                (
                    this.TempoAno == input.TempoAno ||
                    (this.TempoAno != null &&
                    this.TempoAno.Equals(input.TempoAno))
                ) && 
                (
                    this.LimiteChequeEspecial == input.LimiteChequeEspecial ||
                    (this.LimiteChequeEspecial != null &&
                    this.LimiteChequeEspecial.Equals(input.LimiteChequeEspecial))
                ) && 
                (
                    this.TipoConta == input.TipoConta ||
                    (this.TipoConta != null &&
                    this.TipoConta.Equals(input.TipoConta))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CodigoBanco != null)
                    hashCode = hashCode * 59 + this.CodigoBanco.GetHashCode();
                if (this.TipoContaBancaria != null)
                    hashCode = hashCode * 59 + this.TipoContaBancaria.GetHashCode();
                if (this.CodigoAgencia != null)
                    hashCode = hashCode * 59 + this.CodigoAgencia.GetHashCode();
                if (this.Conta != null)
                    hashCode = hashCode * 59 + this.Conta.GetHashCode();
                if (this.Cidade != null)
                    hashCode = hashCode * 59 + this.Cidade.GetHashCode();
                if (this.Uf != null)
                    hashCode = hashCode * 59 + this.Uf.GetHashCode();
                if (this.TempoMes != null)
                    hashCode = hashCode * 59 + this.TempoMes.GetHashCode();
                if (this.TempoAno != null)
                    hashCode = hashCode * 59 + this.TempoAno.GetHashCode();
                if (this.LimiteChequeEspecial != null)
                    hashCode = hashCode * 59 + this.LimiteChequeEspecial.GetHashCode();
                if (this.TipoConta != null)
                    hashCode = hashCode * 59 + this.TipoConta.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

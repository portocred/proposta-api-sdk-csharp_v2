/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando uma pendência.
    /// </summary>
    [DataContract]
    public partial class Pendencia :  IEquatable<Pendencia>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Pendencia" /> class.
        /// </summary>
        /// <param name="Data">Data da pendência..</param>
        /// <param name="Descricao">Descrição da pendência..</param>
        /// <param name="Parecer">Parecer da pendência..</param>
        public Pendencia(DateTime? Data = default(DateTime?), string Descricao = default(string), string Parecer = default(string))
        {
            this.Data = Data;
            this.Descricao = Descricao;
            this.Parecer = Parecer;
        }
        
        /// <summary>
        /// Data da pendência.
        /// </summary>
        /// <value>Data da pendência.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? Data { get; set; }

        /// <summary>
        /// Descrição da pendência.
        /// </summary>
        /// <value>Descrição da pendência.</value>
        [DataMember(Name="descricao", EmitDefaultValue=false)]
        public string Descricao { get; set; }

        /// <summary>
        /// Parecer da pendência.
        /// </summary>
        /// <value>Parecer da pendência.</value>
        [DataMember(Name="parecer", EmitDefaultValue=false)]
        public string Parecer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Pendencia {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Descricao: ").Append(Descricao).Append("\n");
            sb.Append("  Parecer: ").Append(Parecer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Pendencia);
        }

        /// <summary>
        /// Returns true if Pendencia instances are equal
        /// </summary>
        /// <param name="input">Instance of Pendencia to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Pendencia input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Descricao == input.Descricao ||
                    (this.Descricao != null &&
                    this.Descricao.Equals(input.Descricao))
                ) && 
                (
                    this.Parecer == input.Parecer ||
                    (this.Parecer != null &&
                    this.Parecer.Equals(input.Parecer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Descricao != null)
                    hashCode = hashCode * 59 + this.Descricao.GetHashCode();
                if (this.Parecer != null)
                    hashCode = hashCode * 59 + this.Parecer.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

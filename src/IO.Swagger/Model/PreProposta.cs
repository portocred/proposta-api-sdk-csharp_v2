/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Entidade representando uma pré-proposta.
    /// </summary>
    [DataContract]
    public partial class PreProposta :  IEquatable<PreProposta>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TipoSeguro
        /// </summary>
        [DataMember(Name="tipoSeguro", EmitDefaultValue=false)]
        public TipoSeguro? TipoSeguro { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PreProposta" /> class.
        /// </summary>
        /// <param name="Operador">Identificação do operador..</param>
        /// <param name="CodigoProduto">Código do produto. Pelo Produto se descobre também a família de produto..</param>
        /// <param name="ValorCompra">Valor da compra sem entrada (neste caso valor da prestação &#x3D; zero)..</param>
        /// <param name="ValorPrestacao">Valor da PMT a (neste caso valor da compra &#x3D; zero/ valor da entrada &#x3D; 0)..</param>
        /// <param name="PrazoPagamento">Prazo de pagamento..</param>
        /// <param name="TipoSeguro">TipoSeguro.</param>
        /// <param name="DataVencimentoPrimeiraParcela">Data de vencimento da 1ª parcela. Verificar se está coerente com a Carência mínima e máxima combinada com a financeira (dd-mm-aaaa)..</param>
        /// <param name="Candidato">Candidato.</param>
        public PreProposta(string Operador = default(string), string CodigoProduto = default(string), double? ValorCompra = default(double?), double? ValorPrestacao = default(double?), string PrazoPagamento = default(string), TipoSeguro? TipoSeguro = default(TipoSeguro?), DateTime? DataVencimentoPrimeiraParcela = default(DateTime?), Candidato Candidato = default(Candidato))
        {
            this.Operador = Operador;
            this.CodigoProduto = CodigoProduto;
            this.ValorCompra = ValorCompra;
            this.ValorPrestacao = ValorPrestacao;
            this.PrazoPagamento = PrazoPagamento;
            this.TipoSeguro = TipoSeguro;
            this.DataVencimentoPrimeiraParcela = DataVencimentoPrimeiraParcela;
            this.Candidato = Candidato;
        }
        
        /// <summary>
        /// Identificação do operador.
        /// </summary>
        /// <value>Identificação do operador.</value>
        [DataMember(Name="operador", EmitDefaultValue=false)]
        public string Operador { get; set; }

        /// <summary>
        /// Código do produto. Pelo Produto se descobre também a família de produto.
        /// </summary>
        /// <value>Código do produto. Pelo Produto se descobre também a família de produto.</value>
        [DataMember(Name="codigoProduto", EmitDefaultValue=false)]
        public string CodigoProduto { get; set; }

        /// <summary>
        /// Valor da compra sem entrada (neste caso valor da prestação &#x3D; zero).
        /// </summary>
        /// <value>Valor da compra sem entrada (neste caso valor da prestação &#x3D; zero).</value>
        [DataMember(Name="valorCompra", EmitDefaultValue=false)]
        public double? ValorCompra { get; set; }

        /// <summary>
        /// Valor da PMT a (neste caso valor da compra &#x3D; zero/ valor da entrada &#x3D; 0).
        /// </summary>
        /// <value>Valor da PMT a (neste caso valor da compra &#x3D; zero/ valor da entrada &#x3D; 0).</value>
        [DataMember(Name="valorPrestacao", EmitDefaultValue=false)]
        public double? ValorPrestacao { get; set; }

        /// <summary>
        /// Prazo de pagamento.
        /// </summary>
        /// <value>Prazo de pagamento.</value>
        [DataMember(Name="prazoPagamento", EmitDefaultValue=false)]
        public string PrazoPagamento { get; set; }


        /// <summary>
        /// Data de vencimento da 1ª parcela. Verificar se está coerente com a Carência mínima e máxima combinada com a financeira (dd-mm-aaaa).
        /// </summary>
        /// <value>Data de vencimento da 1ª parcela. Verificar se está coerente com a Carência mínima e máxima combinada com a financeira (dd-mm-aaaa).</value>
        [DataMember(Name="dataVencimentoPrimeiraParcela", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DataVencimentoPrimeiraParcela { get; set; }

        /// <summary>
        /// Gets or Sets Candidato
        /// </summary>
        [DataMember(Name="candidato", EmitDefaultValue=false)]
        public Candidato Candidato { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PreProposta {\n");
            sb.Append("  Operador: ").Append(Operador).Append("\n");
            sb.Append("  CodigoProduto: ").Append(CodigoProduto).Append("\n");
            sb.Append("  ValorCompra: ").Append(ValorCompra).Append("\n");
            sb.Append("  ValorPrestacao: ").Append(ValorPrestacao).Append("\n");
            sb.Append("  PrazoPagamento: ").Append(PrazoPagamento).Append("\n");
            sb.Append("  TipoSeguro: ").Append(TipoSeguro).Append("\n");
            sb.Append("  DataVencimentoPrimeiraParcela: ").Append(DataVencimentoPrimeiraParcela).Append("\n");
            sb.Append("  Candidato: ").Append(Candidato).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PreProposta);
        }

        /// <summary>
        /// Returns true if PreProposta instances are equal
        /// </summary>
        /// <param name="input">Instance of PreProposta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PreProposta input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Operador == input.Operador ||
                    (this.Operador != null &&
                    this.Operador.Equals(input.Operador))
                ) && 
                (
                    this.CodigoProduto == input.CodigoProduto ||
                    (this.CodigoProduto != null &&
                    this.CodigoProduto.Equals(input.CodigoProduto))
                ) && 
                (
                    this.ValorCompra == input.ValorCompra ||
                    (this.ValorCompra != null &&
                    this.ValorCompra.Equals(input.ValorCompra))
                ) && 
                (
                    this.ValorPrestacao == input.ValorPrestacao ||
                    (this.ValorPrestacao != null &&
                    this.ValorPrestacao.Equals(input.ValorPrestacao))
                ) && 
                (
                    this.PrazoPagamento == input.PrazoPagamento ||
                    (this.PrazoPagamento != null &&
                    this.PrazoPagamento.Equals(input.PrazoPagamento))
                ) && 
                (
                    this.TipoSeguro == input.TipoSeguro ||
                    (this.TipoSeguro != null &&
                    this.TipoSeguro.Equals(input.TipoSeguro))
                ) && 
                (
                    this.DataVencimentoPrimeiraParcela == input.DataVencimentoPrimeiraParcela ||
                    (this.DataVencimentoPrimeiraParcela != null &&
                    this.DataVencimentoPrimeiraParcela.Equals(input.DataVencimentoPrimeiraParcela))
                ) && 
                (
                    this.Candidato == input.Candidato ||
                    (this.Candidato != null &&
                    this.Candidato.Equals(input.Candidato))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operador != null)
                    hashCode = hashCode * 59 + this.Operador.GetHashCode();
                if (this.CodigoProduto != null)
                    hashCode = hashCode * 59 + this.CodigoProduto.GetHashCode();
                if (this.ValorCompra != null)
                    hashCode = hashCode * 59 + this.ValorCompra.GetHashCode();
                if (this.ValorPrestacao != null)
                    hashCode = hashCode * 59 + this.ValorPrestacao.GetHashCode();
                if (this.PrazoPagamento != null)
                    hashCode = hashCode * 59 + this.PrazoPagamento.GetHashCode();
                if (this.TipoSeguro != null)
                    hashCode = hashCode * 59 + this.TipoSeguro.GetHashCode();
                if (this.DataVencimentoPrimeiraParcela != null)
                    hashCode = hashCode * 59 + this.DataVencimentoPrimeiraParcela.GetHashCode();
                if (this.Candidato != null)
                    hashCode = hashCode * 59 + this.Candidato.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

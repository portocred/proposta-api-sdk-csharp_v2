/* 
 * Gestão de Propostas
 *
 * API de Gestão de Propostas.
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing PropostaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class PropostaApiTests
    {
        private PropostaApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new PropostaApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of PropostaApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PropostaApi
            //Assert.IsInstanceOfType(typeof(PropostaApi), instance, "instance is a PropostaApi");
        }

        
        /// <summary>
        /// Test PropostasGet
        /// </summary>
        [Test]
        public void PropostasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string cpf = null;
            //var response = instance.PropostasGet(clientId, accessToken, xAuthorization, cpf);
            //Assert.IsInstanceOf<List<PropostaResponse>> (response, "response is List<PropostaResponse>");
        }
        
        /// <summary>
        /// Test PropostasIdClientesDocumentosPost
        /// </summary>
        [Test]
        public void PropostasIdClientesDocumentosPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //CpfDocumentoProposta documentacao = null;
            //instance.PropostasIdClientesDocumentosPost(id, clientId, accessToken, documentacao);
            
        }
        
        /// <summary>
        /// Test PropostasIdDocUploadUrlGet
        /// </summary>
        [Test]
        public void PropostasIdDocUploadUrlGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //var response = instance.PropostasIdDocUploadUrlGet(id, clientId, accessToken);
            //Assert.IsInstanceOf<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test PropostasIdDocumentosGet
        /// </summary>
        [Test]
        public void PropostasIdDocumentosGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //string tipoDocumento = null;
            //var response = instance.PropostasIdDocumentosGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, tipoDocumento);
            //Assert.IsInstanceOf<DocumentoProposta> (response, "response is DocumentoProposta");
        }
        
        /// <summary>
        /// Test PropostasIdGet
        /// </summary>
        [Test]
        public void PropostasIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //var response = instance.PropostasIdGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
            //Assert.IsInstanceOf<Proposta> (response, "response is Proposta");
        }
        
        /// <summary>
        /// Test PropostasIdHistoricosGet
        /// </summary>
        [Test]
        public void PropostasIdHistoricosGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //var response = instance.PropostasIdHistoricosGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
            //Assert.IsInstanceOf<List<Historico>> (response, "response is List<Historico>");
        }
        
        /// <summary>
        /// Test PropostasIdMensagensPost
        /// </summary>
        [Test]
        public void PropostasIdMensagensPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //string mensagem = null;
            //instance.PropostasIdMensagensPost(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, mensagem);
            
        }
        
        /// <summary>
        /// Test PropostasIdOfertasGet
        /// </summary>
        [Test]
        public void PropostasIdOfertasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //var response = instance.PropostasIdOfertasGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
            //Assert.IsInstanceOf<Oferta> (response, "response is Oferta");
        }
        
        /// <summary>
        /// Test PropostasIdOfertasPost
        /// </summary>
        [Test]
        public void PropostasIdOfertasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //string idOferta = null;
            //instance.PropostasIdOfertasPost(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, idOferta);
            
        }
        
        /// <summary>
        /// Test PropostasIdPendenciasGet
        /// </summary>
        [Test]
        public void PropostasIdPendenciasGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //var response = instance.PropostasIdPendenciasGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
            //Assert.IsInstanceOf<Pendencia> (response, "response is Pendencia");
        }
        
        /// <summary>
        /// Test PropostasIdPut
        /// </summary>
        [Test]
        public void PropostasIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //AlteracaoPropostaRequest alteracaoPropostaRequest = null;
            //instance.PropostasIdPut(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, alteracaoPropostaRequest);
            
        }
        
        /// <summary>
        /// Test PropostasIdStatusGet
        /// </summary>
        [Test]
        public void PropostasIdStatusGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //var response = instance.PropostasIdStatusGet(id, clientId, accessToken, xAuthorization, codigoLoja, codigoLojista);
            //Assert.IsInstanceOf<StatusPropostaResponse> (response, "response is StatusPropostaResponse");
        }
        
        /// <summary>
        /// Test PropostasPost
        /// </summary>
        [Test]
        public void PropostasPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string clientId = null;
            //string accessToken = null;
            //byte[] xAuthorization = null;
            //string codigoLoja = null;
            //string codigoLojista = null;
            //Proposta proposta = null;
            //var response = instance.PropostasPost(clientId, accessToken, xAuthorization, codigoLoja, codigoLojista, proposta);
            //Assert.IsInstanceOf<InclusaoPropostaResponse> (response, "response is InclusaoPropostaResponse");
        }
        
    }

}
